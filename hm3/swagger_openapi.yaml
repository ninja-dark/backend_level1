openapi: 3.0.1
info:
  title: Shop
  description: OpenAPI for shop 
  version: 1.0.0
  
tags:
- name: user
  description: Everything about your user 
- name: item
  description: Find, add, delete item
- name: order
  description: Everything about order
  
paths:
  /user/login:
    post:
      tags:
      - user
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
          200:
            description: successful logout
            content: {}
  /items:
      get:
        tags:
         - item
        summary: List Items with filters
        operationId: ListItems
        parameters: 
         - name: price_min
           in: query
           description: Lower price limit
           required: false
           schema:
            type: integer
            format: int64
         - name: price_max
           in: query
           description: Upprt price limit
           required: false
           schema: 
            type: integer
            format: int64
        responses:
            200:
              description: successful operation
              content:
               application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Item'
            400:
              description: Invalid price range
              content: {}
  post:
      tags:
       - item
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      parameters: 
      - in: "body"
        name: "query"
        description: "Item object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/components/schemas/Item"
        responses:
          "405":
            description: "Invalid input"
        security:
        - api_key: []
  /items/upload_image:
    post:
      tags:
        - item
      summary: "uploads an image"
      operationId: "uploadFile"
      parameters:
        - name: "body"
          in: "body"
          description: "uploads an image"
          required: true
          schema: 
            type: string
      responses: 
        201: 
          description: successful operation
          content: {}
      security:
        - api_key: []
      
  /items/{itemId}:
    get: 
      tags:
        - item
      summary: Find item by ID 
      operationId: GetItem
      parameters: 
       - name: itemId
         in: path 
         description: ID of item to return 
         required: true
         schema:
          type: integer
          format: int64
      responses: 
        200:
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put: 
      tags:
      - item
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters: 
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema: 
            type: integer
            format: int64
      requestBody: 
        content: 
          application/json:
            schema:
              properties: 
                name: 
                  type: string
                  description: Update name of the item 
                status: 
                  type: string
                  description: Update status of the item
      responses: 
        405:
          description: invalid input
          content: {}
    security: 
     - api_key: []
    delete:
      tags:
        - item
      summary: Deletes a item
      operationId: DeleteItem
      parameters: 
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        400:
          description: Invalid Id supplied
          content: {}
        404: 
          description: item not found
          content: {}
      security: 
      - api_key: []
  /order:
    post:
      tags:
        - order
      summary: Create order
      operationId: addOrder
      requestBody:
        description: order placed for purchasing the Item
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content: 
            aplication/json:
              schema:
               $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
    x-codegen-request-body-name: body
  /order/{orderId}:
    get:
      tags:
        - order
      summary: Find order by ID
      description: ID integer
      operationId: getOrderById
      parameters:
       - name: orderId
         in: path
         description: ID of Item that needs to be featched
         required: true
         schema: 
           type: integer
           format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    put:
      tags:
      - order
      summary: Update order
      operationId: UpdateOrder
      parameters:
        - name: order
          in: query
          description: New order object to replace existed one
          required: true
          schema:
            $ref: "#/components/schemas/Order"
      responses:
            400:
              description: Invalid ID supplied
              content: {}
            404: 
              description: Order not found
              content: {}
            
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email: 
          type: string
        password: 
          type: string
    Item: 
      type: object
      properties: 
        id: 
          type: integer
          format: int64
        name: 
          type: string
        description:
          type: string
        price: 
          type: integer
          format: int64
        image_link: 
          type: string
    Order: 
      type: object
      properties: 
        id: 
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        quality: 
          type: integer
          format: int64
        status: 
          type: string
          description: Order Status
        enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false



securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

    